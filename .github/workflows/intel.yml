name: Intel Linux Build
on: [push, pull_request]

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  CC: icc
  FC: ifort
  CXX: icpc
  I_MPI_CC: icc
  I_MPI_F90: ifort

# Split into a dependency build step and WW3 build step,
# caching the dependencies in between so that multiple builds
# of WW3 can share the same dependency builds.
jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: cache-env
        id: cache-env
        uses: actions/cache@v2
        with:
          path: |
            spack
            ~/.spack
            work_oasis3-mct
          key: spack-${{ matrix.os }}-intel

      - name: install-intel-compilers
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      - name: checkout-ww3
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with: 
            path: ww3

      - name: build-oasis
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install libnetcdf-dev libnetcdff-dev
          sudo apt-get install libmpich-dev
          source spack/share/spack/setup-env.sh
          spack env activate ww3-intel
          export WWATCH3_DIR=${GITHUB_WORKSPACE}/ww3/model
          cd ww3/regtests/ww3_tp2.14/input/oasis3-mct/util/make_dir
          mkdir build && cd build
          cmake ..
          make
          cp -r ${GITHUB_WORKSPACE}/ww3/regtests/ww3_tp2.14/work_oasis3-mct ${GITHUB_WORKSPACE}

  build:
    needs: setup
    strategy:
      matrix:
        switch: [ifremer1, NCEP_st2, NCEP_st4, ite_pdlib, NCEP_st4sbs, NCEP_glwu, OASACM, UKMO]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout-ww3
        uses: actions/checkout@v2
        with: 
            path: ww3

      - name: install-intel
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      - name: cache-env
        id: cache-env
        uses: actions/cache@v2
        with:
          path: |
            spack
            ~/.spack
            work_oasis3-mct
          key: spack-${{ matrix.os }}-intel

      - name: build-ww3
        run: |
          source spack/share/spack/setup-env.sh
          spack env activate ww3-intel
          cd ww3
          export CC=mpicc
          export FC=mpif90
          export OASISDIR=${GITHUB_WORKSPACE}/work_oasis3-mct
          mkdir build && cd build
          cmake .. -DSWITCH=${{ matrix.switch }}
          make -j2

          
