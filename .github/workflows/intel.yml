name: Intel Linux Build
on: [push, pull_request]

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  CC: icc
  FC: ifort
  CXX: icpc
  I_MPI_CC: icc
  I_MPI_F90: ifort
  OASISDIR: ${{ env.GITHUB_WORKSPACE }}/work_oasis3-mct

jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: cache-env
        id: cache-env
        uses: actions/cache@v2
        with:
          path: |
            spack
            ~/.spack
            work_oasis3-mct
            
          key: spack-${{ matrix.os }}-intel

      - name: install-intel
        if: steps.cache-spack.outputs.cache-hit != 'true'
        run: |
          pwd
          ls
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      - name: checkout-ww3
        if: steps.cache-spack.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with: 
            path: ww3

      - name: build-oasis
        if: steps.cache-oasis.outputs.cache-hit != 'true'
        run: |
          pwd
          ls
          echo ${GITHUB_WORKSPACE}
          cd ww3/regtests/ww3_tp2.14/input/oasis3-mct/util/make_dir
          mkdir build && cd build
          cmake ..
          make
          cp -r ${GITHUB_WORKSPACE}/ww3/regtests/ww3_tp2.14/work_oasis3-mct ${GITHUB_WORKSPACE}

      - name: install-spack-dependencies
        if: steps.cache-spack.outputs.cache-hit != 'true'
        run: |
          # Install NetCDF, ESMF, g2, etc using Spack
          git clone -c feature.manyFiles=true https://github.com/spack/spack.git
          source spack/share/spack/setup-env.sh
          spack env create ww3-intel ww3/model/ci/spack.yaml
          spack env activate ww3-intel
          spack compiler find
          spack external find m4 cmake pkgconf openssl
          spack add intel-oneapi-mpi
          spack concretize
          spack install --dirty -v

  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        switch: [NCEP_st2, NCEP_st4]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout-ww3
        uses: actions/checkout@v2
        with: 
            path: ww3

      - name: install-intel
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      - name: cache-spack
        id: cache-spack
        uses: actions/cache@v2
        with:
          path: |
            spack
            ~/.spack
            work_oasis3-mct
          key: spack-${{ matrix.os }}-intel

      - name: build-ww3
        run: |
          source spack/share/spack/setup-env.sh
          spack env activate ww3-intel
          cd ww3
          export CC=mpicc
          export FC=mpif90
          mkdir build && cd build
          cmake .. -DSWITCH=${{ matrix.switch }}
          make -j2

          
